<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->

	<annotation-driven  validator="validator"/>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
		<!-- reference from 
		https://www.mkyong.com/spring-mvc/spring-mvc-how-to-include-js-or-css-files-in-a-jsp-page/
		 -->
		 <!-- Validator -->
<beans:bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
    <beans:property name="validationMessageSource" ref="messageSource"/>
</beans:bean>
<beans:bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
    <beans:property name="basenames" value="messages" />
    <beans:property name="defaultEncoding" value="UTF-8" />
  	<beans:property name="useCodeAsDefaultMessage" value="true"/>
    <!-- The key here is fallbackToSystemLocale which prevents the system to look into the system, 
        thus using "message.properties" if he doesn't find the locale. -->
    <beans:property name="fallbackToSystemLocale" value="false"/>
</beans:bean>
	<resources mapping="/resources/**" location="/WEB-INF/CSS/theme1/" /> 
	<resources mapping="/js/**" location="/WEB-INF/JS/" /> 
	
<!-- 	<context:property-placeholder location="classpath:messages.properties"/>
 -->	<!-- For tiles -->
<beans:bean id="viewResolver" class="org.springframework.web.servlet.view.tiles3.TilesViewResolver">  
<beans:property name="viewClass">  
    <beans:value>org.springframework.web.servlet.view.tiles3.TilesView</beans:value>  
</beans:property>
<beans:property name="order" value="0" />
 </beans:bean>
<beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
<beans:property name="definitions">
<beans:list>
<beans:value>/WEB-INF/tiles/layouts.xml</beans:value>
 <beans:value>/WEB-INF/tiles/views.xml</beans:value> 
</beans:list>
</beans:property>

</beans:bean>
<!-- For upload image -->

    <beans:bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
          <beans:property name="maxUploadSize" value="20971520"/>   <!-- 20MB -->
           <beans:property name="maxInMemorySize" value="1048576" />  <!-- 1MB -->
    </beans:bean>
    
    <!-- one of the properties available; the maximum file size in bytes -->  
    <!-- <property name="maxUploadSize" value="40000000" /> -->  

<!-- Bean View Resolver -->
	<!-- <beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
	 
		<beans:property name="order" value="0" />
	</beans:bean>
	<beans:bean id="viewAndUpdateEmployee" class="org.springframework.web.servlet.view.JstlView">
 <beans:property name="url" value="/WEB-INF/views/Employee/viewAndUpdateEmployee.jsp" ></beans:property>
</beans:bean> -->

<!-- ResourceBundleViewResolver -->
<beans:bean class = "org.springframework.web.servlet.view.ResourceBundleViewResolver">
      <beans:property name = "basename" value = "views" />
      <beans:property name = "order" value = "1" />
   </beans:bean>
	
 <beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<beans:property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<beans:property name="url"
			value="jdbc:mysql://localhost:3306/hrms" />
		<beans:property name="username" value="root" />
		<beans:property name="password" value="root" />
	</beans:bean>

	<!-- Hibernate 4 SessionFactory Bean definition -->
	<beans:bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="annotatedClasses">
			<beans:list>
				<beans:value>com.HRMS.Model.EmployeeVO</beans:value>
				<beans:value>com.HRMS.Model.EmployeeVOImage</beans:value>
				<beans:value>com.HRMS.Model.DepartmentVO</beans:value>
				<beans:value>com.HRMS.Model.EmployeeVO_Login</beans:value>
				<beans:value>com.HRMS.Model.Leaves</beans:value>
				<beans:value>com.HRMS.Model.Employee_Leaves</beans:value>
				<beans:value>com.HRMS.Model.Projects</beans:value>
				<beans:value>com.HRMS.Model.Employee_Projects</beans:value>
			
			</beans:list>
		</beans:property>
		<beans:property name="hibernateProperties">
			<beans:props>
				<beans:prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect
				</beans:prop>
				<beans:prop key="hibernate.show_sql">true</beans:prop>
				 <beans:prop key="hibernate.cache.provider_class">org.hibernate.cache.internal.NoCacheProvider</beans:prop>
			
			 <beans:prop key="hibernate.hbm2ddl.auto">update</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>
	
		<context:component-scan base-package="com.HRMS" />
	
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<beans:bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<beans:property name="sessionFactory" ref="sessionFactory" />
	</beans:bean> 


</beans:beans>
